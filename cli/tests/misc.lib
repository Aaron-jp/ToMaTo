def waitForTask(task, assertSuccess=False):
	import time
	while task_status(task)["status"] == "waiting":
		time.sleep(0.25)
	while task_status(task)["active"]:
		time.sleep(0.25)
	ts = task_status(task)
	assert not assertSuccess or ts["status"] == "succeeded", "Task failed: %s" % ts["name"]
	return ts

def jsonToMods(json):
	import simplejson
	top = simplejson.loads(json)
	mods = []
	mods.append({"type": "topology-rename", "element": None, "subelement": None, "properties": {"name": top["attrs"]["name"]}})
	for devname, dev in top["devices"].iteritems():
		mods.append({"type": "device-create", "element": None, "subelement": None, "properties": dev["attrs"]})
		for iface in dev["interfaces"].values():
			mods.append({"type": "interface-create", "element": devname, "subelement": None, "properties": iface["attrs"]})
	for conname, con in top["connectors"].iteritems():
		mods.append({"type": "connector-create", "element": None, "subelement": None, "properties": con["attrs"]})
		for c in con["connections"].values():
			mods.append({"type": "connection-create", "element": conname, "subelement": None, "properties": c["attrs"]})
	return mods

def link_info(top, dev, ip, samples=10, maxWait=5):
	res = top_action(top, "execute", "device", dev, attrs={"cmd": "ping -A -c %d -n -q -w %d %s" % (samples, maxWait, ip)})
	if not res:
		return
	import re
	spattern = re.compile("(\d+) packets transmitted, (\d+) received(, \+(\d+) errors)?, (\d+)% packet loss, time (\d+)(m?s)")
	dpattern = re.compile("rtt min/avg/max/mdev = (\d+\.\d+)/(\d+\.\d+)/(\d+\.\d+)/(\d+\.\d+) (m?s)(, pipe \d+)?, ipg/ewma (\d+\.\d+)/(\d+\.\d+) (m?s)")
	for line in res.splitlines():
		if spattern.match(line):
			(transmitted, received, dummy, errors, loss, total, unit) = spattern.match(line).groups()
			(transmitted, received, errors, loss, total) = (int(transmitted), int(received), int(errors) if errors else None, float(loss)/100.0, float(total))
		if dpattern.match(line):
			(rttmin, rttavg, rttmax, rttstddev, rttunit, dummy, ipg, ewma, ipg_ewma_unit) = dpattern.match(line).groups()
			(rttmin, rttavg, rttmax, rttstddev, ipg, ewma) = (float(rttmin), float(rttavg), float(rttmax), float(rttstddev), float(ipg), float(ewma))
	if errors:
		return
	import math
	loss = 1.0 - math.sqrt(1.0 - loss)
	avg = rttavg / 2.0
	stddev = rttstddev / 2.0
	if rttunit == "s":
		avg = avg * 1000.0
		stddev = stddev * 1000.0
	return {"lossratio": loss, "delay": avg, "delay_stddev": stddev}
	
def link_config(top, con, c, attrs):
	top_modify(top, [{"type": "connection-configure", "element": con, "subelement": c, "properties": attrs}], True)
	
def errors_print():
	for err in errors_all():
		print err["message"] + "\n\n"