
#ifndef ip_loaded
#define ip_loaded

#include <general.repy>

#ifdef DEBUG
#include <util/ip_util.repy>
#endif

 #FIXME: gateways, netmasks, etc.

ETHERNET_TYPE_IP = 0x0800

#include <layer2/arp.repy>

IP_GLOBAL_BROADCAST = "\xff\xff\xff\xff"
IP_ZERO_ADDRESS = "\x00\x00\x00\x00"

def ipToStr(s):
  return ".".join([str(ord(b)) for b in s])

def ipToNum(s):
  return struct_unpack("!I", s)[0]

def strToIp(s):
  return "".join([chr(int(i)) for i in s.split(".")])
    
def netmaskToNetworkSize(s):
  num = ipToNum(s)
  for i in xrange(0, 33):
    if ((num>>i)<<i) != num:
      return 33-i

def toIp(s):
  if len(s) > 4:
    return strToIp(s)
  else:
    return s

def ip_checksum(data):
  if len(data) & 1:
    data = data + "\x00"
  words = struct_unpack("!%dH" % (len(data)/2), data)
  sum = 0
  for w in words:
    sum += w^0xffff
  while sum >> 16:
    sum = (sum>>16) + (sum&0xffff)
  sum ^= 0xffff
  return sum

class IPv4Header(Header):
  def create(self, src, dst, protocol, payload, options=[], version=4, dscp=0, ecn=0, id=0, dont_fragment=0, more_fragments=0, fragment_offset=0, ttl=64):
    self.src = src
    self.dst = dst
    self.protocol = protocol
    self.payload = payload
    self.options = options
    self.version = version
    self.dscp = dscp
    self.ecn = ecn
    self.id = id
    self.dont_fragment = dont_fragment
    self.more_fragments = more_fragments
    self.fragment_offset = fragment_offset
    self.ttl = ttl
  def decode(self, p):
    (version_ihl, tos, self.length, self.id, flags_frag_off, self.ttl, self.protocol, self.checksum) = struct_unpack("!BBHHHBBH", p[0:12])
    self.version = version_ihl >> 4
    ihl = version_ihl & 0x0f
    self.dscp = tos >> 2
    self.ecn = tos & 0x03
    flags = flags_frag_off >> 13
    self.dont_fragment = flags & 0x02
    self.more_fragments = flags & 0x01
    self.fragment_offset = flags_frag_off & 0x1fff
    self.src = p[12:16]
    self.dst = p[16:20]
    self.options = []
    for i in range(5, ihl):
        self.options.append(p[4*i:4*i+4])
    hlen = 4 * ihl
    self.payload = p[hlen:]
    self.checksum_correct = ip_checksum(p[0:hlen]) == 0
    return self
  def encode(self):
    ihl = 5 + len(self.options)
    version_ihl = ((self.version & 0x0f) << 4) | (ihl & 0x0f)
    tos = ((self.dscp & 0x1f) << 2) | (self.ecn & 0x03)
    self.length = 4 * ihl + len(self.payload)
    flags = ((self.dont_fragment & 0x01) << 1) | (self.more_fragments & 0x01)
    flags_frag_off = ((flags & 0x07) << 13) | (self.fragment_offset & 0x1fff)
    p = struct_pack("!BBHHHBBH", [version_ihl, tos, self.length, self.id, flags_frag_off, self.ttl, self.protocol, 0]) + self.src + self.dst + "".join(self.options)
    p = p[0:10] + struct_pack("!H", [ip_checksum(p)^0xffff]) + p[12:] + self.payload
    return p
  def __str__(self):
    return "IP(version=%d, src=%s, dst=%s, ttl=%d, protocol=%d)" % (self.version, ipToStr(self.src), ipToStr(self.dst), self.ttl, self.protocol)

class IPv4Node(Node):
  def __init__(self, parent, ip="0.0.0.0", gateway="0.0.0.0", networkSize=0, answer_arp=True, **kwargs):
    Node.__init__(self)
    self.parent = parent
    self.ip = toIp(ip)
    self.gateway = toIp(gateway)
    self.networkSize = networkSize
    self.answer_arp = answer_arp
    self.arp_table = {}
    self.arp_cache = {}
    self.fragments = {}
    parent.register(EVENT_PACKET_MATCH, ETHERNET_TYPE_ARP, self._arp)
    parent.register(EVENT_PACKET_BROADCAST, ETHERNET_TYPE_ARP, self._arp)
    parent.register(EVENT_PACKET_MATCH, ETHERNET_TYPE_IP, self._ip)
    parent.register(EVENT_PACKET_BROADCAST, ETHERNET_TYPE_IP, self._ip)
  def _isInNetwork(self, ip):
    return (ipToNum(ip)>>(32-self.networkSize)) == (ipToNum(self.gateway)>>(32-self.networkSize))
  def _arp(self, ethernet, dev):
    arp = ArpHeader(ethernet.payload)
#ifdef DEBUG_ARP
    echo("Received via " + dev + ":\n\t" + str(ethernet) + "\n\t" + str(arp))
#ifdef DEBUG_DUMP
    echo(dump_packet(p))
#endif
    echo("")
#endif
    if arp.htype != ARP_HTYPE_ETHERNET or arp.ptype != ARP_PTYPE_IP:
      return
    if self.answer_arp and arp.oper == ARP_OPER_REQUEST and arp.tpa == self.ip:
      arp_reply = ArpHeader(arp.htype, arp.ptype, arp.hlen, arp.plen, ARP_OPER_REPLY, self.parent.mac, self.ip, arp.sha, arp.spa)
#ifdef DEBUG
      echo("\t" + str(arp_reply))
#endif
      self.parent.send(dst=ethernet.src, type=ETHERNET_TYPE_ARP, payload=arp_reply.encode())
    if arp.oper == ARP_OPER_REPLY:
      self.arp_table[arp.spa]=arp.sha
      if arp.spa in self.arp_cache:
        for p in self.arp_cache[arp.spa]:
          self.send(src=p.src, dst=p.dst, payload=p.payload, protocol=p.protocol)
  def _handle_fragment(self, ip, ethernet, dev):
    if not ip.id in self.fragments:
      self.fragments[ip.id] = {}
    frags = self.fragments[ip.id]
    frags[ip.fragment_offset] = ip.payload
    if not ip.more_fragments:
      frags[ip.fragment_offset+len(ip.payload)/8] = True
    pos = 0
    data = ""
    while pos in frags:
      if frags[pos] is True:
        del self.fragments[ip.id]
        ip.payload = data
        ip.fragment_offset = 0
        ip.more_fragments = 0
        self.handle_ip(ip, ethernet, dev)
        return
      else:
        data += frags[pos]
        pos += len(frags[pos])/8
  def _ip(self, ethernet, dev):
    ip = IPv4Header(ethernet.payload)
#ifdef DEBUG_IP
    echo("Received via " + dev + ":\n\t" + str(ethernet) + "\n\t" + str(ip))
#ifdef DEBUG_DUMP
    echo(dump_packet(p))
#endif
    echo("")
#endif
    if not ip.checksum_correct:
      echo("Invalid IP chechsum")
      return
    self.arp_table[ip.src] = ethernet.src
    if ip.more_fragments or ip.fragment_offset > 0:
      self._handle_fragment(ip, ethernet, dev)
      return
    self._fireEvent(EVENT_PACKET_ANY, ip.protocol, ip, ethernet, dev)
    if ip.dst == self.ip or self.ip == IP_ZERO_ADDRESS:
      self._fireEvent(EVENT_PACKET_MATCH, ip.protocol, ip, ethernet, dev)
    elif ip.dst == IP_GLOBAL_BROADCAST:
      self._fireEvent(EVENT_PACKET_BROADCAST, ip.protocol, ip, ethernet, dev)
    else:
      self._fireEvent(EVENT_PACKET_NO_MATCH, ip.protocol, ip, ethernet, dev)
  def send(self, dst, protocol, payload, ether_dst=None, dev=None, src=None, **kwargs):
    #FIXME: fragment
    if not src:
      src = self.ip
    packet = IPv4Header(src, dst, protocol, payload, **kwargs)
    if dst == IP_GLOBAL_BROADCAST:
      ether_dst = ETHERNET_GLOBAL_BROADCAST
    if not ether_dst:
      if self._isInNetwork(dst):
        next_hop = dst
      else:
        next_hop = self.gateway
      ether_dst = self.arp_table.get(next_hop)
    if not ether_dst:
      if next_hop in self.arp_cache:
        self.arp_cache[next_hop].append(packet)
      else:
        self.arp_cache[next_hop] = [packet]
      arp_request = ArpHeader(ARP_HTYPE_ETHERNET, ARP_PTYPE_IP, 6, 4, ARP_OPER_REQUEST, self.parent.mac, self.ip, ETHERNET_GLOBAL_BROADCAST, next_hop)
#ifdef DEBUG
      echo("\t" + str(arp_request))
#endif
      self.parent.send(dst=ETHERNET_GLOBAL_BROADCAST, type=ETHERNET_TYPE_ARP, payload=arp_request.encode())
    else:
#ifdef DEBUG
      echo("\t" + str(packet))
#endif
      self.parent.send(ether_dst, ETHERNET_TYPE_IP, packet.encode(), dev=dev)

#endif