
#ifndef icmp_loaded
#define icmp_loaded

#include <general.repy>
#include <layer3/ipv4.repy>

IP_PROTOCOL_ICMP = 1

ICMP_TYPE_ECHO_REQUEST = 8
ICMP_CODE_ECHO_REQUEST = 0
ICMP_TYPE_ECHO_REPLY = 0
ICMP_CODE_ECHO_REPLY = 0

class IcmpHeader(Header):
  def create(self, type, code, rest_of_header, payload):
    self.type = type
    self.code = code
    self.rest_of_header = rest_of_header
    self.payload = payload
  def decode(self, p):
    (self.type, self.code, self.checksum) = struct.unpack("!BBH", p[0:4])
    self.rest_of_header = p[4:8]
    self.payload = p[8:]
    self.checksum_correct = ip_checksum(p) == 0
    return self
  def encode(self):
    p = struct.pack("!BBH", self.type, self.code, 0) + self.rest_of_header + self.payload
    p = p[0:2] + struct.pack("!H", ip_checksum(p)^0xffff) + p[4:]
    return p
  def __str__(self):
    return "ICMP(type=%d, code=%d)" % (self.type, self.code)

class IcmpNode(Node):
  def __init__(self, parent, answer_ping=True, **kwargs):
    Node.__init__(self)
    self.parent = parent
    self.answer_ping = answer_ping
    self.parent.register(EVENT_PACKET_MATCH, IP_PROTOCOL_ICMP, self._icmp)
    self.parent.register(EVENT_PACKET_BROADCAST, IP_PROTOCOL_ICMP, self._icmp)
  def _icmp(self, ip, ethernet, dev):
    icmp = IcmpHeader(ip.payload)
#ifdef DEBUG_ICMP
    echo("Received via " + dev + ":\n\t" + str(ethernet) + "\n\t" + str(ip) + "\n\t" + str(icmp))
#ifdef DEBUG_DUMP
    echo(dump_packet(p))
#endif
    echo("")
#endif
    if not icmp.checksum_correct:
      echo("Invalid ICMP chechsum")
      return
    if icmp.type == ICMP_TYPE_ECHO_REQUEST and icmp.code == ICMP_CODE_ECHO_REQUEST:
      self.send(ip.src, ICMP_TYPE_ECHO_REPLY, ICMP_CODE_ECHO_REPLY, icmp.rest_of_header, icmp.payload)
  def send(self, dst, type, code, rest_of_header, payload, **kwargs):
    icmp_reply = IcmpHeader(type, code, rest_of_header, payload)
#ifdef DEBUG
    echo("\t" + str(icmp_reply))
#endif
    self.parent.send(dst, IP_PROTOCOL_ICMP, icmp_reply.encode(), **kwargs)

#endif