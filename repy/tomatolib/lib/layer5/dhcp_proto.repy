
#ifndef dhcp_proto_loaded
#define dhcp_proto_loaded

#include <general.repy>

UDP_PORT_BOOTP_SERVER = 67
UDP_PORT_BOOTP_CLIENT = 68

DHCP_OP_REQUEST = 1
DHCP_OP_REPLY = 2
DHCP_OPTION_VALUE_DISCOVER = "\x01"
DHCP_OPTION_VALUE_OFFER = "\x02"
DHCP_OPTION_VALUE_REQUEST = "\x03"
DHCP_OPTION_VALUE_DECLINE = "\x04"
DHCP_OPTION_VALUE_ACK = "\x05"
DHCP_OPTION_VALUE_NACK = "\x06"
DHCP_MAGIC_COOKIE = "\x63\x82\x53\x63"
DHCP_OPTION_MSG_TYPE = 53
DHCP_OPTION_NETMASK = 1
DHCP_OPTION_GATEWAY = 3
DHCP_OPTION_DOMAIN = 15
DHCP_OPTION_LEASE_TIME = 51
DHCP_OPTION_DHCP_SERVER = 54
DHCP_OPTION_NAMESERVER = 6
DHCP_OPTION_END = 0xff

class DhcpHeader(Header):
  def create(self, op, xid, ciaddr, yiaddr, siaddr, giaddr, chaddr, options, htype=1, hlen=6, hops=0, secs=0, flags=0, magic_cookie=DHCP_MAGIC_COOKIE):
    self.op = op
    self.xid = xid
    self.ciaddr = ciaddr
    self.yiaddr = yiaddr
    self.siaddr = siaddr
    self.giaddr = giaddr
    self.chaddr = chaddr
    self.options = options
    self.htype = htype
    self.hlen = hlen
    self.hops = hops
    self.secs = secs
    self.flags = flags
    self.magic_cookie = magic_cookie
  def decode(self, p):
    (self.op, self.htype, self.hlen, self.hops, self.xid, self.secs, self.flags) = struct.unpack("!4BIHH", p[0:12])
    self.ciaddr = p[12:16]
    self.yiaddr = p[16:20]
    self.siaddr = p[20:24]
    self.giaddr = p[24:28]
    self.chaddr = p[28:28+self.hlen]
    self.magic_cookie = p[236:240]
    options = p[240:]
    self.options = {}
    pos = 0
    while pos < len(options):
        t = ord(options[pos])
        if t == 0xff:
            break
        l = ord(options[pos+1])
        v = options[pos+2:pos+2+l]
        pos += 2 + l
        self.options[t]=v
    return self 
  def encode(self):
    p = struct.pack("!4BIHH", self.op, self.htype, self.hlen, self.hops, self.xid, self.secs, self.flags) + self.ciaddr + self.yiaddr + self.siaddr + self.giaddr + self.chaddr + ("\00" * (16 - self.hlen)) + "\00"*192 + self.magic_cookie
    options_raw = []
    for key in self.options:
        options_raw.append(struct.pack("!BB", key, len(self.options[key])))
        options_raw.append(self.options[key])
    options_raw.append(struct.pack("!BB", DHCP_OPTION_END, 0))
    p += "".join(options_raw)
    return p
  def __str__(self):
    return "DHCP(op=%d, htype=%d, hlen=%d, hops=%d, xid=%d, secs=%d, flags=%d, ciaddr=%s, yiaddr=%s, siaddr=%s, giaddr=%s, chaddr=%s, options=%s)" % (self.op, self.htype, self.hlen, self.hops, self.xid, self.secs, self.flags, ipToStr(self.ciaddr), ipToStr(self.yiaddr), ipToStr(self.siaddr), ipToStr(self.giaddr), macToStr(self.chaddr), str(options))

#endif